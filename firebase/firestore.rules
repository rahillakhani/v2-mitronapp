rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        resource.data.role == 'admin' && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isVendor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor';
    }
    
    function isBuyer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer';
    }
    
    function isVendorOrAdmin() {
      return isVendor() || isAdmin();
    }
    
    function isApprovedVendor() {
      return isVendor() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.profile.isApproved == true;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['email', 'role', 'profile', 'isActive', 'createdAt', 'updatedAt']);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Products collection
    match /products/{productId} {
      allow read: if true; // Products are public
      allow create: if isApprovedVendor() && 
        request.resource.data.vendorId == request.auth.uid;
      allow update: if (isOwner(resource.data.vendorId) && isApprovedVendor()) || isAdmin();
      allow delete: if (isOwner(resource.data.vendorId) && isVendor()) || isAdmin();
    }

    // Categories collection
    match /categories/{categoryId} {
      allow read: if true; // Categories are public
      allow write: if isAdmin();
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.buyerId) || 
        isOwner(resource.data.vendorId) || 
        isAdmin();
      allow create: if isBuyer() && 
        request.resource.data.buyerId == request.auth.uid;
      allow update: if (isOwner(resource.data.buyerId) || 
        isOwner(resource.data.vendorId) || 
        isAdmin()) &&
        // Buyers can only update certain fields
        (isBuyer() ? 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notes', 'updatedAt']) :
          true);
      allow delete: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Reviews are public
      allow create: if isBuyer() && 
        request.resource.data.buyerId == request.auth.uid &&
        // Ensure the buyer has actually purchased the product
        exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId)) &&
        get(/databases/$(database)/documents/orders/$(request.resource.data.orderId)).data.buyerId == request.auth.uid;
      allow update: if isOwner(resource.data.buyerId) || isAdmin();
      allow delete: if isOwner(resource.data.buyerId) || isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isOwner(resource.data.senderId) || 
        isOwner(resource.data.receiverId) || 
        isAdmin();
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isOwner(resource.data.senderId) || isAdmin();
      allow delete: if isOwner(resource.data.senderId) || isAdmin();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAdmin() || 
        (isAuthenticated() && request.resource.data.userId == request.auth.uid);
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Bike models collection (reference data)
    match /bikeModels/{modelId} {
      allow read: if true; // Bike models are public reference data
      allow write: if isAdmin();
    }

    // Analytics collection (admin only)
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // System configuration (admin only)
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Batch operations and compound queries
    match /{document=**} {
      // Allow admin full access for batch operations
      allow read, write: if isAdmin();
    }
  }
}
